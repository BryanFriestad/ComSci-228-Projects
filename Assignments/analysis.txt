	Bryan Friestad

	After doing extensive testing and debuging, I found that overall, Merge sort performed the best. 
Merge sort would be my choice for the Java 10 implementation. My reasonings are due to the following test 
results. All tests were done with 1,000,000 total words to sort. Note: not all tests performed are shown 
on this document due to redundecy.

10-word list sort times:
	1)Merge: 0.128 seconds
	2)Selection: 0.1787 seconds
	3)Quick: 0.7996 seconds


100-word list sort times:
	1)Merge: 0.308 seconds
	2)Selection: 4.397 seconds
	3)Quick: 6.5 seconds


1,000-word list sort times:
	1)Merge: 0.824 seconds
	2)Selection: 23.07 seconds
	3)Quick: 28.47 seconds


10,000-word list sort times:
	1)Merge: 1.092 seconds
	2)Quick: 256.317 seconds
	3)Selection: 261.13 seconds


	As you can see, Merge sort is the clear victor in this situational testing. This follows suit with 
what is expected from their worst-case-scenario times. Merge sort's time complexity is O(n*logn), and 
compared to Selection and Quick sort's time complexity of O(n^2), this is a much more advantageous 
algorithm. Another important thing to notice is that as n increases, Quick sort becomes more and more 
advantageous over selection sort. My second choice would have to be Selection sort due to it's advantage 
over Quick sort with lower n values (most users won't be sorting lists with n values over 10,000). Another 
advantage of Selection sort is that it is very easy to understand and is thus advantageous for Java users 
who are trying to learn more about algorithms. All in all, I think that Merge sort is the superior 
algorithm of the three, due to it's unbeatable speed and impressive elegancy in code that allows it to 
have such low time-complexity.
